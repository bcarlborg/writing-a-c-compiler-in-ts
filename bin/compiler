#!/bin/bash

# Tells bash to exit if any command fails
set -e

###########################################################################
# Validate the input file arg
###########################################################################

# Get the input file (last argument)
INPUT_C_FILE="${!#}"

# Check if an argument was provided
if [ -z "$INPUT_C_FILE" ]; then
    echo "Compiler Driver Error: No input file provided"
    echo "Usage: $0 <input_file.c>"
    exit 1
fi

# Check if the file exists
if [ ! -f "$INPUT_C_FILE" ]; then
    echo "Compiler Driver Error: File '$INPUT_C_FILE' does not exist"
    exit 1
fi

# Check if file ends with .c
if [[ "$INPUT_C_FILE" != *.c ]]; then
    echo "Compiler Driver Error: Input file must have .c extension"
    echo "Got: $INPUT_C_FILE"
    exit 1
fi


###########################################################################
# Find the JS source file for our compiler
###########################################################################

# Get the directory where this script is located.
# BASH_SOURCE[0] contains the path to the currently executing script.
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Construct path to the index.js file relative to this script
# We do this so that even if the script is called from a different directory
# or through symlinks,  we can still find the correct path to index.js
INDEX_FILE="$SCRIPT_DIR/../dist/index.js"

# if index.js does not exist, error out and indicate that the project
# has not been built
if [ ! -f "$INDEX_FILE" ]; then
    echo "Compiler Driver Error: Could not find $INDEX_FILE"
    echo "Have you built the project with 'npm run build'?"
    exit 1
fi

###########################################################################
# Drive the compiler using our home brewed compiler for compilation and
# gcc for preprocessing, assembling, and linking
###########################################################################

# Create paths for intermediate files and the executable
PREPROCESSED_FILE="${INPUT_C_FILE%.c}.i"
ASSEMBLY_FILE="${INPUT_C_FILE%.c}.s"
EXECUTABLE_FILE="${INPUT_C_FILE%.c}"

# Preprocess the input file using GCC
gcc -E -P "$INPUT_C_FILE" -o "$PREPROCESSED_FILE"

# Parse the known command line options
OPTIONS=""
DO_NOT_LINK="false"
if [[ "$*" == *"--lex"* ]]; then
    OPTIONS="$OPTIONS --lex"
    DO_NOT_LINK="true"
fi
if [[ "$*" == *"--parse"* ]]; then
    OPTIONS="$OPTIONS --parse"
    DO_NOT_LINK="true"
fi
if [[ "$*" == *"--codegen"* ]]; then
    OPTIONS="$OPTIONS --codegen"
    DO_NOT_LINK="true"
fi
if [[ "$*" == *"--debug"* ]]; then
    OPTIONS="$OPTIONS --debug"
fi

# Compile the preprocessed file using our home brewed compiler (wow)
# shellcheck disable=SC2086  # TODO -- figure out how to fix this (so that we can quote options)
node "$INDEX_FILE" $OPTIONS --output="$ASSEMBLY_FILE" --input="$PREPROCESSED_FILE"

# Only assemble and link if -S was not passed
if [[ "$*" != *"-S"* ]] && [ "$DO_NOT_LINK" = "false" ]; then
    # Assemble and link by invoking GCC
    gcc -o "$EXECUTABLE_FILE" "$ASSEMBLY_FILE"
fi

# Clean up the preprocessed file
rm -f "$PREPROCESSED_FILE" "$ASSEMBLY_FILE"

